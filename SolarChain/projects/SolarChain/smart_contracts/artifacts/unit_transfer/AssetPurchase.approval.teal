#pragma version 10

smart_contracts.unit_transfer.unit_contract.AssetPurchase.approval_program:
    intcblock 0 1
    callsub __puya_arc4_router__
    return


// smart_contracts.unit_transfer.unit_contract.AssetPurchase.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // smart_contracts/unit_transfer/unit_contract.py:7
    // class AssetPurchase(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@5
    pushbytes 0x03f4d57f // method "purchase(account,account,uint64,uint64,uint64)void"
    txna ApplicationArgs 0
    match __puya_arc4_router___purchase_route@2
    intc_0 // 0
    retsub

__puya_arc4_router___purchase_route@2:
    // smart_contracts/unit_transfer/unit_contract.py:9
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/unit_transfer/unit_contract.py:7
    // class AssetPurchase(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    // smart_contracts/unit_transfer/unit_contract.py:9
    // @abimethod
    callsub purchase
    intc_1 // 1
    retsub

__puya_arc4_router___bare_routing@5:
    // smart_contracts/unit_transfer/unit_contract.py:7
    // class AssetPurchase(ARC4Contract):
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@9
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    retsub

__puya_arc4_router___after_if_else@9:
    // smart_contracts/unit_transfer/unit_contract.py:7
    // class AssetPurchase(ARC4Contract):
    intc_0 // 0
    retsub


// smart_contracts.unit_transfer.unit_contract.AssetPurchase.purchase(seller: bytes, buyer: bytes, price: uint64, qty: uint64, asset: uint64) -> void:
purchase:
    // smart_contracts/unit_transfer/unit_contract.py:9-10
    // @abimethod
    // def purchase(self, seller: Account, buyer: Account, price: UInt64, qty: UInt64, asset: UInt64) -> None:
    proto 5 0
    // smart_contracts/unit_transfer/unit_contract.py:19-25
    // algopy.itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_receiver=buyer,
    //     asset_amount=qty,
    //     asset_sender=seller,
    //     fee=1000
    // ).submit()
    itxn_begin
    frame_dig -5
    itxn_field AssetSender
    frame_dig -2
    itxn_field AssetAmount
    frame_dig -4
    itxn_field AssetReceiver
    frame_dig -1
    itxn_field XferAsset
    // smart_contracts/unit_transfer/unit_contract.py:19
    // algopy.itxn.AssetTransfer(
    pushint 4 // axfer
    itxn_field TypeEnum
    // smart_contracts/unit_transfer/unit_contract.py:24
    // fee=1000
    pushint 1000 // 1000
    itxn_field Fee
    // smart_contracts/unit_transfer/unit_contract.py:19-25
    // algopy.itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_receiver=buyer,
    //     asset_amount=qty,
    //     asset_sender=seller,
    //     fee=1000
    // ).submit()
    itxn_submit
    retsub
